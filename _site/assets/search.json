

[
  
  
    
    
      {
        "title": "Welcome to Jekyll!",
        "excerpt": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.\n\n\n\n\nTo add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.\n\n\n\n\nJekyll also offers powerful support for code snippets:\n\n\n\n\ndef print_hi(name)\n  puts \"Hi, #{name}\"\nend\nprint_hi('Tom')\n#=&gt; prints 'Hi, Tom' to STDOUT.\n\n\n\n\nCheck out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.\n\n",
        "content": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.\n\n\n\n\nTo add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.\n\n\n\n\nJekyll also offers powerful support for code snippets:\n\n\n\n\ndef print_hi(name)\n  puts \"Hi, #{name}\"\nend\nprint_hi('Tom')\n#=&gt; prints 'Hi, Tom' to STDOUT.\n\n\n\n\nCheck out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.\n\n",
        "url": "/jekyll/update/2018/03/06/welcome-to-jekyll/"
      },
    
  
  
  
  {
    "title": "About",
    "excerpt": "\n",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com\n\n\n\n\nYou can find the source code for Minima at GitHub:\njekyll /\nminima\n\n\n\n\nYou can find the source code for Jekyll at GitHub:\njekyll /\njekyll\n\n",
    "url": "/about/"
  },
  
  {
    "title": "Curriculum Vitae",
    "excerpt": "\n",
    "content": "A PDF of my CV can be found here.\n\n",
    "url": "/cv/"
  },
  
  {
    "title": "Notes",
    "excerpt": "\n",
    "content": "This is a collection of notes on various topics that I wrote for my own\nreference that may be useful to the community as well.  Many are written using\nthe Jupyter Notebook, which I highly recommend.\n\n\n\n\n\nKey reactions in helium shells on sub-Chandrasekhar mass white dwarfs.\nA post-2007 bibliography [PDF] of research into sub-Chandrasekhar mass white dwarf explosions. BibTeX file.\nAccelerating Maestro's reaction calculations with OpenACC\nReactions in MESA\nBuilding a website with Jekyll\nInstalling CUDA Toolkit 8.0 and PGI 16.9 on Fedora 24\n\n\n\n\n",
    "url": "/notes/"
  },
  
  {
    "title": "",
    "excerpt": "\n",
    "content": "Nuclear Astrophysics\n\n\n\n\nThrough a mix of applied mathematics, astrophysics, nuclear physics, and high\nperformance computing I study some of the universe’s most powerful explosions.\nMy broad interests and expertise are in nuclear astrophysics.  Below I outline\ncurrent projects.\n\n\n\n\nX-Ray Bursts\n\n\n\n\nX-ray bursts are astrophysical transients originating from thermonuclear\nexplosions on the surface of a neutron star.  These events are one of the most\nexciting laboratories Nature provides us for doing fundamental nuclear physics\nthat's impossible to do on Earth.  In particular, these events give us unique\ninsight into the properties of incredibly dense matter at low energies that\ncannot be reproduced in a lab.  My work as a JINA-CEE postdocotoral fellow\nfocuses on developing state-of-the-art multi-dimensional models of X-ray burst\nphysics.  My current explorations include calculating sensitivities of\nobservations to uncertain nuclear reaction rates that may be explored at the\nNSCL/FRIB, 3D modeling of\nlow-Mach convective mixing preceding runaway, and multi-D models of superburst\nprecursor events.\n\n\n\n\nAccelerated Nuclear Reactions\n\n\n\n\nComputational nuclear astrophysicists like myself often need to include models\nof nuclear burning in simulations.  For the type of high performance computing I\ndo where astrophysical fluid dynamics in multiple spatial dimensions are\nmodeled, integrating the set of coupled, stiff ODEs describing nuclear burning\ncan easily start to dominate the calculation or even make it computationally\ninfeasible.  For this reason, I model a reduced network of nuclear isotopes,\ntypically choosing a network that will demand no more than 10-30% of a single\ntimestep in a simulation.  Many interesting problems can be tackled with simple\nnetworks, but some demand more isotopes and more reactions.\n\n\n\n\nIn light of this, I led the initial effort to redesign the nuclear reaction\nmodules in Maestro to target\naccelerators.  In particular, I have developed the code to utilize GPUs via the\ndirective-based OpenACC standard.  I have achieved\nsome initial success for large enough grids of data.  This work is being\nintegrated into a collaborative effort I'm a part of to develop a set of open\nsource microphysics modules,\nwith the hope that the computational astrophysics community at large can\nintegrate accelerated microphysics into their own codes.  The effort is recent\nand ongoing.  Contributions from the community are welcome.\n\n\n\n\nSub-Chandrasekhar White Dwarf Explosions\n\n\n\n\nThe focus of my PhD dissertation was investigating the rich explosive\npossibilities of sub-Chandrasekhar mass white dwarfs in binary systems.  An\narchetypal example of such a system is an AM CVn binary.  Since the 2007\npublication of Lars Bildsten\nand collaborators demonstrating the possibility of achieving thermonuclear\nrunaway in thin helium shells there has been an explosion of interest in these\nsystems as potential type Ia supernova progenitors.\n\n\n\n\nThis alone justifies careful study of these systems, but there’s more!  Toward\nlower masses these systems are also uniquely able to produce calcium-44 near\nsolar abundance (see section 6.1\nhere) and can lead to\npreviously unobserved faint transients that could show up in recent and upcoming\nsurvey experiments (notably, LSST).\n\n\n\n\nI have published on a suite of simulations requiring about 70 million CPU hours\nexecuted on some of America's largest supercomputers, in particular OLCF's Titan\nand NCSA's Blue Waters.  In this\npaper, I describe the bulk\nproperties of the largest ever suite of 3D models describing the pre-explosive\ndynamics of 18 different sub-Chandrasekhar system configurations.\n\n",
    "url": "/research/"
  },
  
  {
    "title": "Building a website with Jekyll",
    "excerpt": "\n",
    "content": "This repo contains the source for my\nwebsite, built with Jekyll using the alembic-jekyll-theme theme.\nThese notes provide some documentation of the site and site maintenance.\n\n\n\n\nPreparing to build the site\n\n\n\n\nTo build this site and generally learn about Jekyll, I made use of some\nYouTube tutorials,\nthe very nice Jekyll documentation,\nArch Linux documentation on\nJekyll/Ruby, and the alembic-jekyll-theme github readme.\nThis Jekyll cheatsheet is also useful.\n\n\n\n\nJekyll is written in and uses the infrastructure of Ruby.  To build a site with\nJekyll, you'll need this foundation on the system you're developing your site\nwith.  For my setup (Arch Linux), I did the following system installs as root:\n\n\n\n\n$ pacman -Syu ruby rubygems discount\n\n\n\n\n\nFor your setup, you'll want your package manager to get similar packages for\nRuby, Gems, and you may want the discount markdown implementation (not required,\nbut the resources I used recommended it).  There's a gem with the rdiscount\nmarkdown implementation.  I'm not sure if this uses the system implementation.\nA system implementation may be unnecessary.\n\n\n\n\nNext, I used Ruby to install the essential components:\n\n\n\n\n$ gem update\n$ gem install bundler rdoc rdiscount jekyll alembic-jekyll-theme\n\n\n\n\n\nFinally, it's necessary to configure your environment for developing sites with\nJekyll.  For this, I added the following to my .bashrc:\n\n\n\n\nexport PATH=\"$PATH:$(ruby -e 'print Gem.user_dir')/bin\"\nexport GEM_HOME=$(ruby -e 'print Gem.user_dir')\n\n\n\n\n\nThis exposes executables like jekyll and facilitates installing gems as a\nuser (not root).\n\n\n\n\nAt this point, you should have the tools needed to build a new Jekyll site.\n\n\n\n\nBuilding the site\n\n\n\n\nWith our system ready, we can now build a site with Jekyll.\n\n\n\n\nMake a directory to store your website's source files.  Jekyll will create a new\ndirectory here and fill it with initial files to serve as a template for your\nsite.  This is the directory where we'll build the site, not host it.  We'll get\nto hosting later. This looks like\n\n\n\n\n$ mkdir Web\n$ cd Web\n$ jekyll new mysite\n\n\n\n\n\nThe new site may require gems you don't have.  To install all required gems, do\n\n\n\n\n$ cd mysite\n$ bundle install\n\n\n\n\n\nThis will install all the gems listed as dependencies in your site's Gemfile.\n\n\n\n\nYou now have a skeleton for your website.  Development is very easy, because you\ncan build and serve your website locally before dealing with anything on the\nserver hosting your site.  To serve the site locally, do the following in the site's\nroot directory (in the case above, this is .../Web/mysite/):\n\n\n\n\n$ bundle exec jekyll serve\n\n\n\n\n\nBy default, this will make the site available in your browser\nat http://127.0.0.1:4000.  I'm not sure when bundle exec is and is not\nrequired, but the resources I consulted imply it's generally best practice to do\nbundle exec jekyll serve instead of just jekyll serve.  As I understand it,\nthis ensures the site is served in the context of the local gems for the\nproject, which in some setups conflict with global gems.\n\n\n\n\nAdding a theme\n\n\n\n\nTo establish the overall look-and-feel and basic elements of the UI design we\ncan install a theme.  By default, your jekyll site will use (and install) the\nminima theme, which looks great and should serve very well for many websites.\nYour site and theme can still be highly customized.\n\n\n\n\nIf you don't want to use the default theme, a good way to find other themes is\nto search the Ruby gems database for jekyll-theme.\nNot all themes include this in their name, but many do.  Most have a GitHub repo\nthat includes a demo site to give you an idea of how the theme looks.  I choose\nthe alembic-jekyll-theme because\nit's designed specifically as a boilerplate starting point for a site, it looks\ngreat, and it appears to have a large number of users as well as active\ndevelopment/maintenance.  The repo gives detailed installation instructions.\n\n\n\n\nI actually installed this earlier, but it's good to build as a dependency.  To\ndo this, add\n\n\n\n\ngem \"alembic-jekyll-theme\"\n\n\n\n\n\nto your site's Gemfile.  You can then do bundle install to install.  To use\nthe theme, put\n\n\n\n\ntheme: alembic-jekyll-theme\n\n\n\n\n\nin your site's _config.yml (more on this file later).\n\n\n\n\nOften, the first thing that will happen after this is that your site is suddenly\na blank page.  This is because the theme probably doesn't provide the layout\nbeing used by your index.md.  In my case, it was using home, which alembic\ndoesn't provide.  Once I changed it to page, the site was no longer blank.\nLayouts serve as templates.  You can make and use your own in a\n_layouts directory.  What's a bit confusing is that themes store their layouts\nin the gemfile, so you won't see them.  To see the available layouts, you can do\n\n\n\n\n$ bundle show alembic-jekyll-theme\n\n\n\n\n\nThis will give you the directory for the theme's gemfile.  Inside it, you should\nsee a _layouts directory.  Mine looks like\n\n\n\n\n$ ls /home/ajacobs/.gem/ruby/2.5.0/gems/alembic-jekyll-theme-3.0.2/_layouts/\nblog.html  categories.html  default.html  page.html  post.html\n\n\n\n\n\nThough the theme seems to work without it, I also incorporated elements of the\nexample _config.yml provided in alembic's\nREADME.  I suggest reading that\ndocumentation to learn more about ways to customize and some of the more\npowerful features available in the theme.\n\n\n\n\nCustomization and configuration\n\n\n\n\nI love how customizable Jekyll is and the power it gives you over your site.\nThis includes customizing the themes, so a theme doesn't lock you into too much\n(if you look at example sites built with alembic, you'll see some of the\npossibilities).\n\n\n\n\nThe first thing you need to understand about configuring and customizing a\nJekyll site is the _config.yml file.  The Jekyll docs give a nice\noverview of\nthis file along with a list of some of the key variables. alembic-jekyll-theme\nalso provides an example _config.yml.  I used these two resources to write my\nsite's _config.yml.  Below, I'll just mention and document some of the key\nchanges I made.\n\n\n\n\nKey Gemfile lines\n\n\n\n\ngem \"rdiscount\"\ngem \"alembic-jekyll-theme\"\n\n\n\n\n\nKey _config.yml lines*\n\n\n\n\nmarkdown: rdiscount\ntheme: alembic-jekyll-theme\ntimezone: America/New_York\n# Site navigation\nnavigation_header:\n    Home: /\n    CV: /cv/\n    Research: /research/\n    Notes: /notes/\n\n\n\n\n\nYou can customize aspects of your theme by copying files into your site\ndirectory that supercede the defaults. An example of doing this that I've done\nwas to modify the sidebar alembic offers when you put aside: True in your YAML\nfront matter.  To do this, I first found the file with\n\n\n\n\n$ bundle show alembic-jekyll-theme\n\n\n\n\n\nI then copied site-aside.html from the gem _includes directory into my\nsite's _includes directory.  I then modified the html to make the sidebar I\nwant.\n\n\n\n\nDeploying the site\n\n\n\n\nThe primary reason I switched to Jekyll for site development is because\nI can use the same workflow I use for code development.  I write plain-text\nfiles, compile those into a static website with Jekyll, and then just copy (via\nscp, git, rsync, or any other method commonly used in code development as well)\nthe _site files to my website's server.  Updating my site is as simple as\nediting a text file, compiling, and git magic, just like when I code.\n\n\n\n\nPerhaps the easiest and cheapest way to deploy/host your site is to use GitHub pages.  The\nresources I linked at the beginning of these notes offer lots of details on how\nto do this.  The only reason I didn't is because I already had my website setup\nthrough a hosting service.  It also seems that\nNetlify\nis a popular service for deploying Jekyll sites in an automated way with nice\ngit integration.\n\n\n\n\nIf you're like me and just have a remote server that hosts your site, you can do\nsomething like the deploy.sh script in my site repo's\nutil/ directory:\n\n\n\n\n#!/bin/bash\n#deploy.sh\n\nhost_domain=amjacobs.net\nsync_command=\"cd web &amp;&amp; date | tee -a gitsync.out gitsync.err &gt; /dev/null &amp;&amp; git pull 1&gt;&gt;gitsync.out 2&gt;&gt;gitsync.err\"\n\njekyll build\ngit commit -am'Rebuild site.'\ngit push\n\nssh $host_domain \"$sync_command\"\n\n\n\n\n\nNow when I need to update my site, I simply make the desired changes, commit\nthem, and then execute the deploy.sh script in the site's root directory.\nNote that for this to work you will need to setup ssh\nkeys for passwordless ssh access.\n\n",
    "url": "/notes/website/"
  }
  
]

